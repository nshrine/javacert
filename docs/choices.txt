GENERAL CONSIDERATIONS AND INTERPRETATION OF SPECIFICATION

I decided to use RMI for the networking rather than sockets as it is a 
higher-level API that takes care of establishing connections and 
serializing/deserializing objects and allows you to easily call methods on
remote objects. I could not see any advantage in using the sockets API.

I decided to group the code into 4 packages:

1. suncertify.db - This contains the lowest level data access classes and
    exceptions including a data access proxy class for wrapping remote  
    data access classes. Client applications will use one of the classes in
    this package for accessing the database.

2. suncertify.server - This package contains the RMI code that
    runs on the server. Network clients do not directly access these classes,
    the proxy class in the suncertify.db package wraps remote data access.

3. suncertify.client - This package contains the GUI client code.

4. suncertify - This package contains the code for starting the application
    and a class for storing and loading configuration data and a class of
    static utility methods.

I envisage that in future implementations of the system such as in a
web application that the suncertify.db and suncertify.server packages would
remain unchanged and that the suncertify.client package would be replaced
by JSP pages and/or a package of servlet classes. The configuration class
could also be used in a web application.

This is possible as data access and locking occurs in the suncertify.db 
package and a web application could use a BookingData instance for data
access, allowing multiple web client threads to concurrently access the
database.

Although I tried to make the client as thin as possible with all data access
and locking handled by the suncertify.db classes, I found that it was simpler
in this case to handle some business logic in the client such as checking 
the customer IDs were of the right length and that the current date was close
enough to the start of occupancy for the room to be booked, rather than
 throwing an exception back to the client from the database layer. Also, the
lock, book, unlock cycle is implemented in the client rather than having an
intermediate facade between the low-level record locking and the client in
which perhaps there would be a single "book" method. I found this two-tier
approach simpler in this case as I decided that the record needs to be 
locked while a user is viewing a record and not just when the actual booking
changes. In this way the user has a synchronous view of the data and doesn't
see stale data.


DB IMPLEMENTATION

I decided that a simple and robust method of accessing the data file was to
have a single data access object for the server which performs all reading
and writing of the database synchronously (i.e. no data caching, all reading
and writing is directly to and from the file). Therefore this class contains
a single java.io.RandomAccessFile instance for accessing the database.

I decided that a cache of the data in the database file held in memory was
not necessary as I do not believe that the amount of data being transferred
when bookings are made will have an impact on performance if the data file
is accessed directly.

To simplify data integrity any method that moves the file pointer is
synchronized on the Data object's monitor, so that only one thread at a time
can move the file pointer and access the data file.

I did not make the Data class a singleton to allow for future applications
that may have more than one Data object accessing different data files
simultaneously.

The implementation of the interface for this application does not throw a
DuplicateKeyException as it is valid to have identical records in the database.
This is because there could be more than one room available with the exact
same details. 


LOCKING ALGORITHM

I chose to perform the locking by having a Map object as an instance variable
of the Data class which stores key-value pairs indicating which records are
currently locked. The key is the number of the locked record and the 
associated value is the lock cookie with which the record was locked.

The lock and unlock methods are both synchronized on the Data object's 
monitor such that only one thread can execute either method at a time ensuring
consistency of the state of the Map of locked records when multiple client
threads are calling the Data object's methods. The lock method causes the 
current thread to sleep if the record trying to be locked is already locked.

When unlock is called and a record is unlocked all threads waiting for a record
to become unlocked are awoken by a call to notifyAll() and they execute in turn
checking to see if the record that was just unlocked was they one they are
waiting for. If so then the first one to execute (determined by the JVM) that
was waiting for the record that just became unlocked will aquire the lock and
the other threads will sleep again until the next record is unlocked.

This algorithm is not ideal in that all threads are awoken and perform a check
on the Map of locked records rather than just the one waiting for the 
particular record that was just unlocked. I do not believe that this is a 
significant performance hit in terms of affecting the responsiveness of the 
GUI, especially compared to delays due to transmission of data over the 
network to remote clients and so I decided to stick with this simple 
algorithm. It also has the drawback that it will not necessarily be the client
who has been waiting longest for the locked record that will aquire the lock
first upon the record being unlocked. That is because the JVM schedules the
order in which threads will execute when notifyAll() is called and all the 
awoken threads become runnable and compete for the monitor in order
to execute the synchronized code. I decided that implementing such fairness was
beyond the scope of this implementation and would not be noticeable unless 
there were a large number of clients, many of whom were trying to book the
same booking at about the same time.


EXTENDING THE DB INTERFACE 

I extended the DB interface to create an interface appropriate for this 
particular application whereby an additional findExact method was added to
find exact matches to the criteria as specified rather than the superinterface
find method that matches criteria beginning with matching substrings. 

Where the specification says "It must allow the user to search the data for
all records, or for records where the name and/or location fields exactly match
values specified by the user.", I decided to interpret this is the most
inclusive way possible and allow searches for either a preferred hotel or
preferred location or a search for a specific hotel at a specific location.
Therefore, the findExact method also takes as an argument the type of matching
of the criteria to be done, either returning a match if ALL fields match
(logical AND) or if ANY fields match (logical OR). 

It was necessary to extend the DB interface rather than just adding another 
method to my DB implementation as the transparency of the different operating 
modes (standalone or networked) at the higher levels (GUI code) of the program 
relies on programming to interfaces, thus hiding the underlying implementation.


NETWORK SERVER IMPLEMENTATION

I decided to use RMI for the network client-server communication as it is a
transparent way of calling methods and passing data over the network with a
high-level API without having to deal with network sockets and implementing
a serialisation scheme for transmitting the data. 

For remote data access I simply specified a RemoteBookingDB interface that is
identical to the non-networked BookingDB interface except that it extends the
Remote interface as required by RMI and each method additionally throws a
RemoteException, as also required by the RMI API. I decided that on the 
client side I would wrap the remote instance of the RemoteBookingDB 
implementation in a proxy class (BookingDataProxy) that implements the
BookingDB interface. In this way, it is possible for the client to
transparently work with a BookingDB object with a factory class providing the
appropriate implementation at runtime, either a BookingData object that
accesses the data file within the same JVM or a BookingDataProxy object that
accesses the data file across the network via a RemoteBookingData object.

Since the BookingDataProxy cannot throw any RemoteExceptions as it has to 
adhere to the BookingDB interface I decided that any RemoteExceptions it
caught would be rethrown as RuntimeExceptions. In a production version of the
application these would be dealt with appropriately when they are caught.
However, in this technology demonstration version I decided that network IO
errors are too severe to be handled appropriately and therefore are promoted
to RuntimeExceptions and the application will crash if there is a severe
network problem such as loss of connectivity or the server dies. However,
client death is handled in this version.

Initially RemoteBookingData was a singleton, however when trying to implement
a method for unlocking records when a client has died leaving a record locked
I found that it was useful to have a RemoteBookingData instance per client 
such that I could implement the Unreferenced interface in RemoteBookingData
which would me to handle individual client disconnections on the server side.

I therefore implemented a Remote Server object that clients use to obtain
RemoteBookingData objects. This is the only job of the Server class.


DEALING WITH CLIENT DISCONNECTION

The RemoteBookingData object records which record the client it serves
currently has locked and also has a copy of the associated lock cookie. In 
this way when it detects that the client had died (via a call to the 
unreferenced() method by the RMI system) it is unable to unlock the record that
the client was locking. In this implementation the clients only ever lock one
record at a time so the RemoteBookingData object only has to store one locked
record number and one lock cookie. In future this could be modified to store
a Map of locked record numbers and associated cookies for clients that lock
multiple records simultaneously.

I tested the system for unlocking records when clients disconnect by 
bombarding the network server with lock and unlock requests for random records
simultaneously from 10 client threads and then killing the client threads at
some random time during execution. However, when I started the clients again
some records were still locked on the server and so were not being unlocked by
the call to unreferenced(). I eventually realised that this was because a
client thread could be waiting in the Data object's lock() method for a record
to become unlocked when it's unreferenced() method was called. Therefore when
the client died and unreferenced() was called the thread on the server had not
yet obtained the lock and so the RemoteBookingData object would not be aware 
that any record needed unlocking. Then as record becomes available the thread
on the server would obtain the lock AFTER unreferenced had been called thereby
locking the record and keeping it locked after the client had died.

To fix this I made the unreferenced() method set a flag indicating that the
client had died and the RemoteBookingData.lock() method checks this flag
after it has obtained the lock and if it is set indicating that the client had
died in the meantime then it immediately unlocks the record again.


OBTAINING A DATA CONNECTION

I wanted the client GUI code to be independent of the operating mode i.e
network or standalone and to just be concerned with accessing a class that
implements the BookingDB interface. Therefore, when in standalone mode it can
use BookingData but when it network mode I needed a proxy class that implements
BookingDB between the client and the remote data access class RemoteBookingData
that implements RemoteBookingDB.

In order to conformt to the BookingDB interface the BookingDataProxy class 
simply wraps a RemoteBookingDB object and rethrows any RemoteExceptions as 
RuntimeExceptions, so that the only checked Exceptions it throws are the ones
specified in the BookingDB interface. I felt this was appropriate as an
exception arising from a network communication problem is outside the normal
operation of the programme and I decided it was beyond the scope of this 
project to do so but instead just recommend restarting the client. Any locks
left on the server will be automatically released.

In order for a client to obtain the appropriate data connection object I made
a factory class that is initialised with a Configuration object that specifies
the mode of operation, then the BookingDBFactory returns the appropriate
BookingDB implementation based on the Configuration, either a BookingData
instance for the server and standalone client or a BookingDataProxy instance
for the network client.


CONFIGURATION

I made a Configuration class for storing details specific to the mode of
operation. The Configuration class wraps a Properties object that stores the
configuration parameters as key-value pairs and has the built-in functionality
to save and load these values from a file.

Configuration objects are initialised with a name identifying the
configuration, a list of keys the configuration will use and some descriptive
text for the configuration. The Configuration class also has static application
constant values such as the name to be used for the title of the main window,
the default database file name and the default server port.

The Configuration also has definitions for certain types of keys used to 
reference values in the enclosed Properties object and additionally has a text
description for these types of keys. Using the getKeys(), getKeyType() and
getKeyDescription() methods of the Configuration class a GUI tool for editing
the configuration can dynamically initialise itself with the appropriate
fields and field labels.

This is what the ConfigurationDialog class does. In this way more configuration
parameters could be added to the application and the configuration GUI would
pick them up without having to be re-coded.

The Configuration class defines 3 constant instances corresponding to the 3
modes of operation in this implementation i.e. network server, network client
and standalone operation. The application exclusively uses these three static
members and does not instantiate any Configuration objects.


THE CLIENT GUI

The client GUI frame class ClientFrame displays a Window with a menu, a panel
at the top for specifying search parameters and a table below displaying
the fields for records returned from searches of the database. I decided that
this was a simple and functional layout, being able to modify the list
of bookings available with the search parameters above quickly and inuitively
without opening seperate windows which I felt would have been slow and 
cumbersome. The table data is controlled by a TableModel sub-class called
BookingTableModel that accesses the database via a BookingDB instance variable
that is initialised on starting the GUI. I used padding round the edges of the
search panel components and the booking table to give an aesthetic display.

When editing a booking either by selecting "Edit Booking" from the Edit menu
or by double-clicking a row in the table (as is common in GUI interfaces) the
date that the booking is available is checked and if it is more than 48 hours
in the future then a dialog is displayed informing the user of when the room 
will be available for booking. Also, if the occupancy date has passed then
the user will be informed. Since the date-available field in the data file has
no time information the rooms it is assumed that the room becomes available at
midnight on the date specified in the data file and therefore is available for
booking from midnight two days before it is available.

If it is within 48 hours of the start of occupancy then a BookingDialog window
appears which is a modal dialog displaying the booking details and an editable
field for entering the customer ID for booking the room. I made the dialog
modal such that any client can only edit one booking at a time. I felt this
functionality was desireable such that a member of staff did not lock many
records simultaneously rendering them unavailable to other clients.


STARTING THE APPLICATION

The BootStrap class contains the main method for starting the application. 
Firstly the command line arguments are parsed and a usage message is displayed
if they are incorrect.

A Configuration instance is assigned corresponding to the mode of operation
and the properties corresponding to this mode are loaded from a configuration
file if one exists otherwise the defaults defined in the Configuration class
are used.

Next a ConfigurationDialog is displayed so that the user can edit the 
Configuration parameters (database filename, port number) before the 
application starts normal operation.

A BookingDB instance is obtained from the BookingDBFactory using the edited
Configuration and this is passed to the main program that is now started,
this being either the server, the network client or the standalone client.

After the main part of the program is successfully started and is running in a
new thread the Configuration that was used to configure the program is saved 
to a file. The edited Configuration does not get saved if the main program
did not start as this Configuration is erroneous and so should be discarded
and the defaults used again next time for initialisation.


EXCEPTION HANDLING

Throughout the application, exceptions that should never occur or cannot be
reliably recovered from - such as an IOException in the Data class or a
RecordNotFoundException in the BookingTableModel class when retrieving data for
a table row or a SecurityException in the RemoteBookingData class when
unlocking a record - are rethrown as RuntimeExceptions as it means there is
a system error or the application is in an internally inconsistent state and 
therefore cannot reliably continue.